// Code generated by protoc-gen-go.
// source: coprocess_object.proto
// DO NOT EDIT!

package coprocess

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Object struct {
	HookType HookType           `protobuf:"varint,1,opt,name=hook_type,json=hookType,enum=coprocess.HookType" json:"hook_type,omitempty"`
	HookName string             `protobuf:"bytes,2,opt,name=hook_name,json=hookName" json:"hook_name,omitempty"`
	Request  *MiniRequestObject `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	Session  *SessionState      `protobuf:"bytes,4,opt,name=session" json:"session,omitempty"`
	Metadata map[string]string  `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Spec     map[string]string  `protobuf:"bytes,6,rep,name=spec" json:"spec,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Object) GetRequest() *MiniRequestObject {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Object) GetSession() *SessionState {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *Object) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Object) GetSpec() map[string]string {
	if m != nil {
		return m.Spec
	}
	return nil
}

type Event struct {
	Payload string `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type EventReply struct {
}

func (m *EventReply) Reset()                    { *m = EventReply{} }
func (m *EventReply) String() string            { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()               {}
func (*EventReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func init() {
	proto.RegisterType((*Object)(nil), "coprocess.Object")
	proto.RegisterType((*Event)(nil), "coprocess.Event")
	proto.RegisterType((*EventReply)(nil), "coprocess.EventReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dispatcher service

type DispatcherClient interface {
	Dispatch(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error)
	DispatchEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventReply, error)
}

type dispatcherClient struct {
	cc *grpc.ClientConn
}

func NewDispatcherClient(cc *grpc.ClientConn) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Dispatch(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := grpc.Invoke(ctx, "/coprocess.Dispatcher/Dispatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) DispatchEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := grpc.Invoke(ctx, "/coprocess.Dispatcher/DispatchEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dispatcher service

type DispatcherServer interface {
	Dispatch(context.Context, *Object) (*Object, error)
	DispatchEvent(context.Context, *Event) (*EventReply, error)
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coprocess.Dispatcher/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Dispatch(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_DispatchEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).DispatchEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coprocess.Dispatcher/DispatchEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).DispatchEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coprocess.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _Dispatcher_Dispatch_Handler,
		},
		{
			MethodName: "DispatchEvent",
			Handler:    _Dispatcher_DispatchEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coprocess_object.proto",
}

func init() { proto.RegisterFile("coprocess_object.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x4f, 0xcf, 0x93, 0x40,
	0x10, 0xc6, 0x5f, 0x5e, 0x5e, 0xda, 0x32, 0xb5, 0xa6, 0xae, 0xff, 0x08, 0xd5, 0x88, 0x78, 0xe1,
	0x84, 0x8a, 0x89, 0x9a, 0xf6, 0x66, 0x6c, 0xd2, 0x4b, 0x35, 0xa1, 0xde, 0xc9, 0x96, 0x4e, 0x52,
	0x6c, 0x61, 0x57, 0x76, 0xdb, 0x84, 0xc4, 0xcf, 0xe3, 0x67, 0xf4, 0x68, 0xba, 0x0b, 0x94, 0xda,
	0xd3, 0x7b, 0xdb, 0x79, 0xe6, 0xf9, 0xcd, 0xc3, 0x4c, 0x80, 0x67, 0x29, 0xe3, 0x25, 0x4b, 0x51,
	0x88, 0x84, 0xad, 0x7f, 0x62, 0x2a, 0x43, 0x5e, 0x32, 0xc9, 0x88, 0xdd, 0xea, 0xee, 0x9b, 0xb3,
	0x25, 0xcf, 0x8a, 0x2c, 0x29, 0xf1, 0xd7, 0x01, 0x85, 0xbc, 0xf0, 0xbb, 0x2f, 0xcf, 0x26, 0x81,
	0x42, 0x64, 0xac, 0x48, 0x84, 0xa4, 0x12, 0xeb, 0x76, 0x27, 0x26, 0x65, 0x79, 0xce, 0x0a, 0xad,
	0xfb, 0x7f, 0x4c, 0xe8, 0x7d, 0x57, 0x73, 0xc8, 0x3b, 0xb0, 0xb7, 0x8c, 0xed, 0x12, 0x59, 0x71,
	0x74, 0x0c, 0xcf, 0x08, 0x1e, 0x46, 0x8f, 0xc3, 0x16, 0x0b, 0x17, 0x8c, 0xed, 0x7e, 0x54, 0x1c,
	0xe3, 0xc1, 0xb6, 0x7e, 0x91, 0x49, 0x4d, 0x14, 0x34, 0x47, 0xe7, 0xd6, 0x33, 0x02, 0x5b, 0x37,
	0xbf, 0xd1, 0x1c, 0xc9, 0x47, 0xe8, 0xd7, 0x1f, 0xea, 0x98, 0x9e, 0x11, 0x0c, 0xa3, 0x17, 0x9d,
	0x61, 0xcb, 0xac, 0xc8, 0x62, 0xdd, 0xd5, 0xe9, 0x71, 0x63, 0x26, 0xef, 0xa1, 0x5f, 0x2f, 0xe0,
	0xdc, 0x29, 0xee, 0x79, 0x87, 0x5b, 0xe9, 0xce, 0xea, 0xb4, 0x59, 0xdc, 0xf8, 0xc8, 0x0c, 0x06,
	0x39, 0x4a, 0xba, 0xa1, 0x92, 0x3a, 0x96, 0x67, 0x06, 0xc3, 0xe8, 0x55, 0x87, 0xd1, 0x01, 0xe1,
	0xb2, 0x76, 0xcc, 0x0b, 0x59, 0x56, 0x71, 0x0b, 0x90, 0xb7, 0x70, 0x27, 0x38, 0xa6, 0x4e, 0x4f,
	0x81, 0x93, 0x6b, 0x70, 0xc5, 0x31, 0xd5, 0x90, 0x32, 0xba, 0x33, 0x18, 0x5d, 0xcc, 0x22, 0x63,
	0x30, 0x77, 0x58, 0xa9, 0x93, 0xd9, 0xf1, 0xe9, 0x49, 0x9e, 0x80, 0x75, 0xa4, 0xfb, 0x43, 0x73,
	0x14, 0x5d, 0x4c, 0x6f, 0x3f, 0x1b, 0xee, 0x27, 0xb0, 0xdb, 0x79, 0xf7, 0x01, 0xfd, 0xd7, 0x60,
	0xcd, 0x8f, 0x58, 0x48, 0xe2, 0x40, 0x9f, 0xd3, 0x6a, 0xcf, 0xe8, 0xa6, 0x06, 0x9b, 0xd2, 0x7f,
	0x00, 0xa0, 0x2c, 0x31, 0xf2, 0x7d, 0x15, 0xfd, 0x06, 0xf8, 0x9a, 0x09, 0x4e, 0x65, 0xba, 0xc5,
	0x92, 0x44, 0x30, 0x68, 0x2a, 0xf2, 0xe8, 0x6a, 0x47, 0xf7, 0x5a, 0xf2, 0x6f, 0xc8, 0x14, 0x46,
	0x0d, 0xa3, 0xa3, 0xc7, 0x1d, 0x97, 0x52, 0xdc, 0xa7, 0xff, 0x2b, 0x2a, 0xdb, 0xbf, 0xf9, 0x62,
	0x2d, 0xcc, 0xbf, 0x86, 0xb1, 0xee, 0xa9, 0xbf, 0xec, 0xc3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x78, 0x92, 0xfb, 0x71, 0xe6, 0x02, 0x00, 0x00,
}
